zmodload -i zsh/parameter || return 1
# vim: set filetype=zsh

prompt_valodim_help () {
    setopt localoptions nocshnullcmd noshnullcmd
    [[ $ZSH_VERSION < 5.0.0 ]] &&
	print 'Requires ZSH_VERSION 5.0.0'$'\n'
    <<-\EOF
        My basic prompt. Not too fancy, but not too plain either. I used, loved
        and tinkered on it quite some time.

        The RPROMPT is empty.
	EOF
}

prompt_valodim_vcsstyles () {

    local FMT_BRANCH FMT_ACTION FMT_PATH

    # set formats
    # %b - branchname
    # %u - unstagedstr (see below)
    # %c - stangedstr (see below)
    # %a - action (e.g. rebase-i)
    # %R - repository path
    # %S - path in the repository
    FMT_BRANCH="%f%%b%b%u%c" # e.g. master¹²
    FMT_ACTION="(%F{cyan}%a%f"   # e.g. (rebase-i)
    FMT_PATH="%F{green}%R/%%F{yellow}%S"              # e.g. ~/repo/subdir

    zstyle ':vcs_info:*' enable git svn darcs bzr hg

    # check-for-changes can be really slow.
    # you should disable it, if you work with large repositories
    zstyle ':vcs_info:*:prompt:*' check-for-changes true

    zstyle ':vcs_info:*:prompt:*' unstagedstr '¹'  # display ¹ if there are unstaged changes
    zstyle ':vcs_info:*:prompt:*' stagedstr '²'    # display ² if there are staged changes

    # non-vcs
    zstyle ':vcs_info:*:prompt:*' nvcsformats   "%F{green}%3~%f »"

    # generic vcs
    zstyle ':vcs_info:*:prompt:*' formats         "${FMT_PATH} ${FMT_BRANCH} %s »"
    zstyle ':vcs_info:*:prompt:*' actionformats   "${FMT_PATH} ${FMT_BRANCH}${FMT_ACTION} %s »"

    # special hg stuff
    zstyle ':vcs_info:hg:prompt:*'  formats       "${FMT_PATH} ${FMT_BRANCH} ☿"
    zstyle ':vcs_info:hg:prompt:*' actionformats  "${FMT_PATH} ${FMT_BRANCH}${FMT_ACTION} ☿"

    # special git stuff
    zstyle ':vcs_info:git:prompt:*' formats       "${FMT_PATH} ${FMT_BRANCH} %m%f±"
    zstyle ':vcs_info:git:prompt:*' actionformats "${FMT_PATH} ${FMT_BRANCH}${FMT_ACTION} %m%f±"

    local -a hooks
    (( $+valodim_settings[git-st] )) && hooks+=( git-valodim-st )
    (( $+valodim_settings[git-stash] )) && hooks+=( git-valodim-stash )
    zstyle ':vcs_info:git*+set-message:*' hooks $hooks

}

# Show remote ref name and number of commits ahead-of or behind
function +vi-git-valodim-st() {
    local ahead behind remote
    local -a gitstatus

    # Are we on a remote-tracking branch?
    remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
        --symbolic-full-name 2>/dev/null)/refs\/remotes\/}

    if [[ -n ${remote} ]] ; then
        # for git prior to 1.7
        # ahead=$(git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
        ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
        (( $ahead )) && gitstatus+=( "%F{green}+${ahead}%f" )

        # for git prior to 1.7
        # behind=$(git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
        behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
        (( $behind )) && gitstatus+=( "%F{red}-${behind}%f" )

        hook_com[branch]="${hook_com[branch]}${(j:/:)gitstatus}"
    fi
}

# Show count of stashed changes
function +vi-git-valodim-stash() {
    local -a stashes

    if [[ -s ${hook_com[base]}/.git/refs/stash ]] ; then
        stashes=$(git stash list 2>/dev/null | wc -l)
        [[ -n $stashes ]] && hook_com[misc]="%F{243}${stashes} "
    fi
}

prompt_valodim_precmd () {
    setopt localoptions noksharrays unset

    if [[ -w $PWD ]]; then
        pwdstat="%B%F{blue}"
    elif [[ -r $PWD ]]; then
        pwdstat="%B%F{yellow}"
    else
        pwdstat="%B%F{red}"
    fi
    [[ -O $PWD ]] && pwdstat+=":" || pwdstat+="."

    # add info about localhist status
    # note this looks default if no localhist specific stuff happens at all
    [[ -z $localhist ]] && pwdstat+="%F{blue}" || pwdstat+="%F{cyan}"
    [[ -z $localhist_disable ]] && pwdstat+=":" || pwdstat+="."

    (( $+ld_preload[(r)*stderred*] )) || pwdstat+="%F{red}:"

    vcs_info 'prompt'
}

prompt_valodim_ps1 () {

    # hide username if it's my regular one (anyone else might wanna change this)
    local user=""
    if [[ $USER != "valodim" ]]; then
      user="%(!.%F{red}root%f@.%n@)"
    fi

    # bunch of custom hostname colors. for most, t2cc works just fine. :)
    local -A hostcolors
    hostcolors=(
        SteelHooves 245
    )

    local host_color
    if [[ -n $hostcolors[$HOST] ]]; then
        host_color=$(( ${hostcolors[$HOST]} % $(echotc Co) ))
    else
        # get a number from the sha1 hash of the hostname
        host_color=$(sha1sum <<< $HOST | tr -c -d 123456789 | tail -c 15 -)
        # divide by 256/88/8/whatever
        host_color=$(( $sum % $(echotc Co) ))
    fi
    local host="%F{${host_color}%}%M%f%b%u%k"

    local shlvl="%(4L.%L .)"
    local exstat="%(1j. %B%F{green}%j.)"
    local jobstat="%(?..%B%F{red}%?)"

    local gitinfo='${${vcs_info_msg_0_%%.}/$HOME/~}'

    pwdstat="%B%F{blue}::"

    PROMPT="[${user}${host}] ${shlvl}\${pwdstat}${jobstat}${exstat} $gitinfo %b%f"
}

prompt_valodim_setup () {
    setopt localoptions noksharrays unset

    # load zsh/termcap
    zmodload zsh/termcap

    # load vcs_info styles
    autoload -Uz vcs_info
    prompt_valodim_vcsstyles 

    # set up left-side prompt
    prompt_valodim_ps1

    # we know add-zsh-hook has been loaded by promptinit
    add-zsh-hook precmd prompt_valodim_precmd

    # no multiline so we don't need cr, but we do need both % and $ expansion
    prompt_opts=( percent subst )

    return 0
}

[[ -o kshautoload ]] || prompt_valodim_setup "$@"
